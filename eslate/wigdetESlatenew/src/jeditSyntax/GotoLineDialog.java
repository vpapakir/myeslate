/*
 * GotoLineDialog.java
 *
 * Created on 1 Ιούνιος 2006, 1:53 μμ
 */

package jeditSyntax;

import java.awt.*;
import java.awt.event.*;
import java.util.*;
import javax.swing.*;
import javax.swing.text.AbstractDocument;
import javax.swing.text.Document;
import javax.swing.text.DocumentFilter;

/**
 *
 * @author  Kriton Kyrimis
 */
public class GotoLineDialog extends javax.swing.JDialog
{
    /**    
     * Serialization version.
     */
    final static long serialVersionUID = 1L;

    /**
     * The selected line number. If <code>null</code>, the dialog was
     * canceled.
     */
    public Integer line = null;
    /**
     * Maximum allowed line number.
     */
    private int maxLine;

    /** Creates new form GotoLineDialog */
    public GotoLineDialog(Component owner, int maxLine)
    {
      super(
        owner instanceof Frame ?
          (Frame)owner :
          (Frame)(SwingUtilities.getAncestorOfClass(Frame.class, owner)),
        ResourceBundle.getBundle("jeditSyntax/FindDialogResources").getString(
          "gotoLine"
        ),
        true
      );
      this.maxLine = maxLine;
      initComponents();
      tweakComponents();
      center(owner);
    }

    /**
     * Centers the dialog relative to its owner.
     * @param     owner   The owner of the dialog. If it is <null>code</code>,
     *                    the dialog will be placed in the center of the screen.
     */
    private void center(Component owner)
    {
      Dimension s = getSize();
      int width = s.width;
      int height = s.height;
      int x, y;
      Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();
      int screenWidth = screenSize.width;
      int screenHeight = screenSize.height;
      if (owner == null || !owner.isVisible()) {
        x = (screenWidth - width) / 2;
        y = (screenHeight - height) / 2;
      }else{
        Dimension ownerSize = owner.getSize();
        int ownerWidth = ownerSize.width;
        int ownerHeight = ownerSize.height;
        Point ownerLocation = owner.getLocationOnScreen();
        x = ownerLocation.x + (ownerWidth - width) / 2;
        y = ownerLocation.y + (ownerHeight - height) / 2;
        if ((x + width) > screenWidth) {
          x = screenWidth - width;
        }
        if ((y + height) > screenHeight) {
          y = screenHeight - height;
        }
        if (x < 0) {
          x = 0;
        }
        if (y < 0) {
          y = 0;
        }
      }
      setLocation(x, y);
    }

    private void tweakComponents()
    {
      setResizable(false);

      // Allow only positive integers for input.
      DocumentFilter df = new PositiveIntegerDocumentFilter(maxLine);
      Document lineDocument = lineField.getDocument();
      ((AbstractDocument)lineDocument).setDocumentFilter(df);
      lineField.setDocument(lineDocument);

      lineField.addActionListener(new ActionListener()
      {
        public void actionPerformed(ActionEvent e)
        {
          String text = lineField.getText();
          if ("".equals(text)) {
            line = null;
          }else{
            line = Integer.parseInt(lineField.getText());
          }
          dispose();
        }
      });

      findButton.addActionListener(new ActionListener()
      {
        public void actionPerformed(ActionEvent e)
        {
          line = Integer.parseInt(lineField.getText());
          dispose();
        }
      });

      cancelButton.addActionListener(new ActionListener()
      {
        public void actionPerformed(ActionEvent e)
        {
          line = null;  // Cancel the dialog.
          dispose();
        }
      });

    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        lineField = new javax.swing.JTextField();
        findButton = new javax.swing.JButton();
        cancelButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        findButton.setText(java.util.ResourceBundle.getBundle("jeditSyntax.FindDialogResources").getString("find"));
        findButton.setMaximumSize(new java.awt.Dimension(64, 23));
        findButton.setMinimumSize(new java.awt.Dimension(64, 23));
        findButton.setPreferredSize(new java.awt.Dimension(64, 23));

        cancelButton.setText(java.util.ResourceBundle.getBundle("jeditSyntax.FindDialogResources").getString("cancel"));
        cancelButton.setMaximumSize(new java.awt.Dimension(64, 23));
        cancelButton.setMinimumSize(new java.awt.Dimension(64, 23));
        cancelButton.setPreferredSize(new java.awt.Dimension(64, 23));

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(lineField, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 201, Short.MAX_VALUE)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, layout.createSequentialGroup()
                        .add(findButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 89, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 28, Short.MAX_VALUE)
                        .add(cancelButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 84, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(lineField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(14, 14, 14)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(findButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(cancelButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new GotoLineDialog(new javax.swing.JFrame(), 1000).setVisible(true);
            }
        });
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton cancelButton;
    private javax.swing.JButton findButton;
    private javax.swing.JTextField lineField;
    // End of variables declaration//GEN-END:variables
    
}
