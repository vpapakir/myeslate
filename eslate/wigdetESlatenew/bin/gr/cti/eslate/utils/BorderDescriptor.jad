// Decompiled by DJ v3.5.5.77 Copyright 2003 Atanas Neshkov  Date: 28/4/2004 8:53:33 рм
// Home Page : http://members.fortunecity.com/neshkov/dj.html  - Check often for new version!
// Decompiler options: packimports(3) 
// Source File Name:   BorderDescriptor.java

package gr.cti.eslate.utils;

import com.sun.java.swing.plaf.windows.WindowsBorders;
import java.awt.*;
import java.io.*;
import java.util.Hashtable;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.border.*;
import javax.swing.plaf.basic.BasicBorders;

// Referenced classes of package gr.cti.eslate.utils:
//            NewRestorableImageIcon, OneLineBevelBorder, NoTopOneLineBevelBorder, ESlateFieldMap2, 
//            StorageStructure, ESlateUtils

public class BorderDescriptor
    implements Externalizable
{

    public BorderDescriptor(Border border)
    {
        borderClass = null;
        borderAttributes = new Hashtable();
        unknownBorderState = null;
        if(border != null)
            borderClass = border.getClass();
        else
            borderClass = null;
    }

    public BorderDescriptor()
    {
        borderClass = null;
        borderAttributes = new Hashtable();
        unknownBorderState = null;
    }

    public Class getBorderClass()
    {
        return borderClass;
    }

    protected void analyzeUnknownBorder(Border border)
    {
        if(border != null && borderClass != null)
            if((java.io.Externalizable.class).isAssignableFrom(border.getClass()))
                try
                {
                    ByteArrayOutputStream stream = new ByteArrayOutputStream();
                    ObjectOutputStream oos = new ObjectOutputStream(stream);
                    ((Externalizable)border).writeExternal(oos);
                    oos.flush();
                    unknownBorderState = stream.toByteArray();
                    oos.close();
                }
                catch(Throwable thr)
                {
                    System.out.println("Problems while saving the state of the border of class " + border.getClass().getName() + '.');
                    unknownBorderState = new byte[0];
                    thr.printStackTrace();
                }
            else
                unknownBorderState = new byte[0];
    }

    protected void analyzeBorderAttributes(LineBorder border)
    {
        Color c = border.getLineColor();
        int thickNess = border.getThickness();
        borderAttributes.put("Thickness", new Integer(thickNess));
        if(c != null)
            borderAttributes.put("Color", c);
    }

    protected void analyzeBorderAttributes(MatteBorder border, Component comp)
    {
        try
        {
            Insets insets = border.getBorderInsets(comp);
            if(insets != null)
                borderAttributes.put("Insets", insets);
            Color c = border.getMatteColor();
            Icon icon = border.getTileIcon();
            if(icon != null)
            {
                if((javax.swing.ImageIcon.class).isAssignableFrom(icon.getClass()))
                    icon = new NewRestorableImageIcon(((ImageIcon)icon).getImage());
                if(icon != null && (gr.cti.eslate.utils.NewRestorableImageIcon.class).isAssignableFrom(icon.getClass()))
                    borderAttributes.put("Icon", icon);
            }
            if(c != null)
                borderAttributes.put("Color", c);
        }
        catch(Throwable thr)
        {
            thr.printStackTrace();
            System.out.println("Border " + border + " was only partially analyzed.");
        }
    }

    protected void analyzeBorderAttributes(EmptyBorder border, Component comp)
    {
        Insets insets = border.getBorderInsets(comp);
        if(insets != null)
            borderAttributes.put("Insets", insets);
    }

    protected void analyzeBorderAttributes(OneLineBevelBorder border, Component comp)
    {
        int bevelType = border.getBevelType();
        boolean visible = comp.isVisible();
        if(!visible)
            comp.setVisible(true);
        Color highlightColor = border.getHighlightOuterColor(comp);
        Color shadowColor = border.getShadowOuterColor(comp);
        if(!visible)
            comp.setVisible(visible);
        borderAttributes.put("BevelType", new Integer(bevelType));
        if(highlightColor != null)
            borderAttributes.put("HighlightInnerColor", highlightColor);
        if(shadowColor != null)
            borderAttributes.put("ShadowColor", shadowColor);
    }

    protected void analyzeBorderAttributes(NoTopOneLineBevelBorder border, Component comp)
    {
        int bevelType = border.getBevelType();
        Color highlightColor = border.getHighlightOuterColor(comp);
        Color shadowColor = border.getShadowOuterColor(comp);
        borderAttributes.put("BevelType", new Integer(bevelType));
        if(highlightColor != null)
            borderAttributes.put("HighlightInnerColor", highlightColor);
        if(shadowColor != null)
            borderAttributes.put("ShadowColor", shadowColor);
    }

    protected void analyzeBorderAttributes(BevelBorder border, Component comp)
    {
        int bevelType = border.getBevelType();
        Color highlightInnerColor = border.getHighlightInnerColor(comp);
        Color highlightOuterColor = border.getHighlightOuterColor(comp);
        Color shadowInnerColor = border.getShadowInnerColor(comp);
        Color shadowOuterColor = border.getShadowOuterColor(comp);
        borderAttributes.put("BevelType", new Integer(bevelType));
        if(highlightInnerColor != null)
            borderAttributes.put("HighlightInnerColor", highlightInnerColor);
        if(highlightOuterColor != null)
            borderAttributes.put("HighlightOuterColor", highlightOuterColor);
        if(shadowInnerColor != null)
            borderAttributes.put("ShadowInnerColor", shadowInnerColor);
        if(shadowOuterColor != null)
            borderAttributes.put("ShadowOuterColor", shadowOuterColor);
    }

    protected void analyzeBorderAttributes(EtchedBorder border, Component comp)
    {
        int etchType = border.getEtchType();
        Color highlightColor = border.getHighlightColor(comp);
        Color shadowColor = border.getShadowColor(comp);
        borderAttributes.put("EtchType", new Integer(etchType));
        if(highlightColor != null)
            borderAttributes.put("HighlightColor", highlightColor);
        if(shadowColor != null)
            borderAttributes.put("ShadowColor", shadowColor);
    }

    protected void analyzeBorderAttributes(TitledBorder border, Component comp)
    {
        String title = border.getTitle();
        int titleJustification = border.getTitleJustification();
        int titlePosition = border.getTitlePosition();
        Font font = border.getTitleFont();
        Color color = border.getTitleColor();
        BorderDescriptor bd = ESlateUtils.getBorderDescriptor(border.getBorder(), comp);
        if(title != null)
            borderAttributes.put("Title", title);
        borderAttributes.put("TitleJustification", new Integer(titleJustification));
        borderAttributes.put("TitlePosition", new Integer(titlePosition));
        if(font != null)
            borderAttributes.put("Font", font);
        if(color != null)
            borderAttributes.put("Color", color);
        if(border != null)
            borderAttributes.put("Border", bd);
    }

    protected void analyzeBorderAttributes(CompoundBorder border, Component comp)
    {
        BorderDescriptor bd1 = ESlateUtils.getBorderDescriptor(border.getInsideBorder(), comp);
        BorderDescriptor bd2 = ESlateUtils.getBorderDescriptor(border.getOutsideBorder(), comp);
        if(bd1 != null)
            borderAttributes.put("InsideBorder", bd1);
        if(bd2 != null)
            borderAttributes.put("OutsideBorder", bd2);
    }

    protected boolean analyzeBasicBorder(Border border)
    {
        String s = border.getClass().getName();
        if(s.equals("javax.swing.plaf.basic.BasicBorders$ButtonBorder") || s.equals("javax.swing.plaf.basic.BasicBorders$RadioButtonBorder") || s.equals("javax.swing.plaf.basic.BasicBorders$ToggleButtonBorder") || s.equals("javax.swing.plaf.basic.BasicBorders$MenuBarBorder") || s.equals("javax.swing.plaf.basic.BasicBorders$SplitPaneBorder") || s.equals("javax.swing.plaf.basic.BasicBorders$SplitPaneDividerBorder") || s.equals("javax.swing.plaf.basic.BasicBorders$TextFieldBorder") || s.equals("javax.swing.plaf.basic.BasicBorders$ProgressBarBorder") || s.equals("javax.swing.plaf.basic.BasicBorders$InternalFrameBorder") || s.equals("javax.swing.plaf.basic.BasicBorders$MarginBorder") || s.equals("com.sun.java.swing.plaf.windows.WindowsBorders$ProgressBarBorder") || s.equals("com.sun.java.swing.plaf.windows.WindowsBorders$ToolBarBorder") || s.equals("com.sun.java.swing.plaf.windows.WindowsBorders$FocusCellHighlightBorder") || s.equals("com.sun.java.swing.plaf.windows.WindowsBorders$TableHeaderBorder") || s.equals("com.sun.java.swing.plaf.windows.WindowsBorders$InternalFrameBorder"))
        {
            borderAttributes.put("BasicBorderClass", s);
            return true;
        } else
        {
            return false;
        }
    }

    private Border restoreBasicBorder()
    {
        String s = (String)borderAttributes.get("BasicBorderClass");
        if(s != null)
            return restoreBasicBorder(s);
        else
            return null;
    }

    private Border restoreBasicBorder(String s)
    {
        if(s.equals("javax.swing.plaf.basic.BasicBorders$ButtonBorder"))
            return BasicBorders.getButtonBorder();
        if(s.equals("javax.swing.plaf.basic.BasicBorders$RadioButtonBorder"))
            return BasicBorders.getRadioButtonBorder();
        if(s.equals("javax.swing.plaf.basic.BasicBorders$ToggleButtonBorder"))
            return BasicBorders.getToggleButtonBorder();
        if(s.equals("javax.swing.plaf.basic.BasicBorders$MenuBarBorder"))
            return BasicBorders.getMenuBarBorder();
        if(s.equals("javax.swing.plaf.basic.BasicBorders$SplitPaneBorder"))
            return BasicBorders.getSplitPaneBorder();
        if(s.equals("javax.swing.plaf.basic.BasicBorders$SplitPaneDividerBorder"))
            return BasicBorders.getSplitPaneDividerBorder();
        if(s.equals("javax.swing.plaf.basic.BasicBorders$TextFieldBorder"))
            return BasicBorders.getTextFieldBorder();
        if(s.equals("javax.swing.plaf.basic.BasicBorders$ProgressBarBorder"))
            return BasicBorders.getProgressBarBorder();
        if(s.equals("javax.swing.plaf.basic.BasicBorders$InternalFrameBorder"))
            return BasicBorders.getInternalFrameBorder();
        if(s.equals("javax.swing.plaf.basic.BasicBorders$MarginBorder"))
            return new javax.swing.plaf.basic.BasicBorders.MarginBorder();
        if(s.equals("com.sun.java.swing.plaf.windows.WindowsBorders$ProgressBarBorder"))
            return WindowsBorders.getProgressBarBorder();
        if(s.equals("com.sun.java.swing.plaf.windows.WindowsBorders$ToolBarBorder"))
            return WindowsBorders.getToolBarBorder();
        if(s.equals("com.sun.java.swing.plaf.windows.WindowsBorders$FocusCellHighlightBorder"))
            return WindowsBorders.getFocusCellHighlightBorder();
        if(s.equals("com.sun.java.swing.plaf.windows.WindowsBorders$TableHeaderBorder"))
            return WindowsBorders.getTableHeaderBorder();
        if(s.equals("com.sun.java.swing.plaf.windows.WindowsBorders$InternalFrameBorder"))
            return WindowsBorders.getInternalFrameBorder();
        else
            return null;
    }

    public Hashtable getAttributes()
    {
        return borderAttributes;
    }

    public Border getBorder()
    {
        if(borderClass == null)
            return null;
        Border border = null;
        if(unknownBorderState == null)
        {
            if((javax.swing.border.LineBorder.class).isAssignableFrom(borderClass))
            {
                Color color = (Color)borderAttributes.get("Color");
                int thickness = ((Integer)borderAttributes.get("Thickness")).intValue();
                border = new LineBorder(color, thickness);
            } else
            if((javax.swing.border.MatteBorder.class).isAssignableFrom(borderClass))
            {
                Color color = (Color)borderAttributes.get("Color");
                Insets insets = (Insets)borderAttributes.get("Insets");
                Icon icon = (Icon)borderAttributes.get("Icon");
                if(icon == null)
                    border = new MatteBorder(insets.top, insets.left, insets.bottom, insets.right, color);
                else
                    border = new MatteBorder(insets.top, insets.left, insets.bottom, insets.right, icon);
            } else
            if((javax.swing.border.EmptyBorder.class).isAssignableFrom(borderClass))
            {
                Insets insets = (Insets)borderAttributes.get("Insets");
                border = new EmptyBorder(insets);
            } else
            if((gr.cti.eslate.utils.OneLineBevelBorder.class).isAssignableFrom(borderClass))
            {
                int bevelType = ((Integer)borderAttributes.get("BevelType")).intValue();
                Color highlightColor = (Color)borderAttributes.get("HighlightColor");
                Color shadowColor = (Color)borderAttributes.get("ShadowColor");
                border = new OneLineBevelBorder(bevelType, highlightColor, shadowColor);
            } else
            if((gr.cti.eslate.utils.NoTopOneLineBevelBorder.class).isAssignableFrom(borderClass))
            {
                int bevelType = ((Integer)borderAttributes.get("BevelType")).intValue();
                Color highlightColor = (Color)borderAttributes.get("HighlightColor");
                Color shadowColor = (Color)borderAttributes.get("ShadowColor");
                border = new NoTopOneLineBevelBorder(bevelType, highlightColor, shadowColor);
            } else
            if((javax.swing.border.SoftBevelBorder.class).isAssignableFrom(borderClass))
            {
                int bevelType = ((Integer)borderAttributes.get("BevelType")).intValue();
                Color hightlightInnerColor = (Color)borderAttributes.get("HighlightInnerColor");
                Color highlightOuterColor = (Color)borderAttributes.get("HighlightOuterColor");
                Color shadowInnerColor = (Color)borderAttributes.get("ShadowInnerColor");
                Color shadowOuterColor = (Color)borderAttributes.get("ShadowOuterColor");
                border = new SoftBevelBorder(bevelType, highlightOuterColor, hightlightInnerColor, shadowOuterColor, shadowInnerColor);
            } else
            if((javax.swing.border.BevelBorder.class).isAssignableFrom(borderClass))
            {
                int bevelType = ((Integer)borderAttributes.get("BevelType")).intValue();
                Color hightlightInnerColor = (Color)borderAttributes.get("HighlightInnerColor");
                Color highlightOuterColor = (Color)borderAttributes.get("HighlightOuterColor");
                Color shadowInnerColor = (Color)borderAttributes.get("ShadowInnerColor");
                Color shadowOuterColor = (Color)borderAttributes.get("ShadowOuterColor");
                border = new BevelBorder(bevelType, highlightOuterColor, hightlightInnerColor, shadowOuterColor, shadowInnerColor);
            } else
            if((javax.swing.border.EtchedBorder.class).isAssignableFrom(borderClass))
            {
                int etchType = ((Integer)borderAttributes.get("EtchType")).intValue();
                Color hightlightColor = (Color)borderAttributes.get("HighlightColor");
                Color shadowColor = (Color)borderAttributes.get("ShadowColor");
                border = new EtchedBorder(etchType, hightlightColor, shadowColor);
            } else
            if((javax.swing.border.TitledBorder.class).isAssignableFrom(borderClass))
            {
                String title = (String)borderAttributes.get("Title");
                int titleJustification = ((Integer)borderAttributes.get("TitleJustification")).intValue();
                int titlePosition = ((Integer)borderAttributes.get("TitlePosition")).intValue();
                Font font = (Font)borderAttributes.get("Font");
                Color color = (Color)borderAttributes.get("Color");
                Border innerBorder = ((BorderDescriptor)borderAttributes.get("Border")).getBorder();
                border = new TitledBorder(innerBorder, title, titleJustification, titlePosition, font, color);
            } else
            if((javax.swing.border.CompoundBorder.class).isAssignableFrom(borderClass))
            {
                Border insideBorder = ((BorderDescriptor)borderAttributes.get("InsideBorder")).getBorder();
                Border outsideBorder = ((BorderDescriptor)borderAttributes.get("OutsideBorder")).getBorder();
                border = new CompoundBorder(outsideBorder, insideBorder);
            } else
            {
                border = restoreBasicBorder();
                if(border == null)
                    try
                    {
                        border = (Border)borderClass.newInstance();
                    }
                    catch(Throwable thr)
                    {
                        return null;
                    }
            }
        } else
        {
            border = restoreBasicBorder(borderClass.getName());
            if(border == null)
                try
                {
                    border = (Border)borderClass.newInstance();
                    if(border != null && (java.io.Externalizable.class).isAssignableFrom(borderClass))
                        try
                        {
                            ByteArrayInputStream stream = new ByteArrayInputStream(unknownBorderState);
                            ObjectInputStream ois = new ObjectInputStream(stream);
                            ((Externalizable)border).readExternal(ois);
                            ois.close();
                        }
                        catch(Throwable thr)
                        {
                            thr.printStackTrace();
                        }
                }
                catch(Throwable thr2)
                {
                    System.out.println("Unable to instantiate a border of class " + borderClass.getName() + ". Probably there is no zero-argument constructor in this class");
                    System.out.println(thr2.getClass().getName() + ": " + thr2.getMessage());
                }
        }
        return border;
    }

    public void writeExternal(ObjectOutput out)
        throws IOException
    {
        ESlateFieldMap2 fieldMap = new ESlateFieldMap2(3, 3);
        if(borderClass != null)
            fieldMap.put("BorderClassName", borderClass.getName());
        fieldMap.put("BorderAttributes", borderAttributes);
        fieldMap.put("UnknownBorderState", unknownBorderState);
        out.writeObject(fieldMap);
    }

    public void readExternal(ObjectInput in)
        throws IOException, ClassNotFoundException
    {
        StorageStructure fieldMap = (StorageStructure)in.readObject();
        if(fieldMap.getDataVersion().startsWith("1."))
        {
            borderClass = (Class)fieldMap.get("BorderClass");
        } else
        {
            String borderClassName = (String)fieldMap.get("BorderClassName");
            if(borderClassName != null)
                try
                {
                    borderClass = Class.forName(borderClassName);
                }
                catch(Throwable thr)
                {
                    System.out.println("Error while restoring border of class: " + borderClassName);
                    thr.printStackTrace();
                }
            else
                borderClass = null;
        }
        borderAttributes = (Hashtable)fieldMap.get("BorderAttributes");
        unknownBorderState = (byte[])fieldMap.get("UnknownBorderState", (Object)null);
    }

    public static final int STR_FORMAT_VERSION = 3;
    static final long serialVersionUID = 12L;
    Class borderClass;
    Hashtable borderAttributes;
    byte unknownBorderState[];
}